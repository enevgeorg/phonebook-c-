#include <iostream>
#include <string>
#include <fstream>

using namespace std;

const char* phonebook_filename = "phone_book.txt";


struct contact_info
{
	string phone_number;
	string contact_name;

	contact_info* next_element = NULL;
};

contact_info* phonebook = NULL;

unsigned int N_entries = 0;

contact_info* look_up[26] = { NULL };
void upcase(string&);                      //function prototype which would convert an string to uppercase
contact_info* create_entry();              //function prototype which gets the input from user and stores in into a new contact object.
void contact_insert(contact_info*);        //function prototype which inserts the new contact object into the phonebook
contact_info* contact_find(string);        //function prototype to search and find a contact object based on Name
void contact_show(contact_info);           //function prototype to show the information of a contact objecy
void contact_find_show_delete();           //function prototype to find and delete contacts 
void contact_find_show();                  //function prototype to find and show a Name in phonebook (plus some Error handling)
void phonebook_save();                     //function prototype to store data into file 
void phonebook_load();                     //function prototype to load the data file 
void showallcontacts();                    //function prototype to show all contacts on terminal

int main()
{
        //After running the program, it must enter an infinity loop which provides the below menu
	phonebook_load();

	char userchoice;
	do
	{
		cout << endl;
		cout << "a. Add new contact." << endl;
		cout << "b. Delete contact." << endl;
		cout << "c. Find a contact and show it. " << endl;
		cout << "d. Save every contact entered by now. " << endl;
		cout << "e.To exit write "exit" . " << endl;
		cout << "g.Show every contact that is saved on File . " << endl;
		cout << endl << "Enter your choice: ";
		cin >> userchoice;
		switch (userchoice)
		{
		case 'a': case 'A':
			contact_insert(create_entry());
			break;
			system("cls");
		case 'b': case 'B':
			contact_find_show_delete();
			break;
			system("cls");
		case 'c': case 'C':
			contact_find_show();
			break;
			system("cls");
		case 'd': case 'D': case 'e': case 'E':
			phonebook_save();

			break;
			system("cls");
		case 'g': case 'G':
			showallcontacts();
			break;
			system("cls");
		default:
			cout << endl << "!!!!!!!!! Invalid input !!!!!!!!" << endl;

		}
	} while ((userchoice != 'exit') && (userchoice != 'EXIT'));
	cout << "Exiting program..." << endl;
	return 0;
	system("cls");
}

void upcase(string& str)
{
	for (int i = 0; i < str.length(); i++) str[i] = toupper(str[i]);
}

contact_info* create_entry()
{
	string novzapis;
	contact_info* contact = phonebook;
	contact_info* new_entry = new contact_info;
	cout << "Please enter contacts name:: ";
	cin.ignore();                               //clearing input buffer to use getline function
	getline(cin, new_entry->contact_name);
	upcase(new_entry->contact_name);
	cout << "Please enter phone number of contact: ";
	getline(cin, new_entry->phone_number);
	upcase(new_entry->phone_number);
	new_entry->next_element = NULL;
	cout << "Contact successfully entered" << endl;
	return new_entry;
}

void contact_insert(contact_info* newcontact)
{
	// If the new item is the 1st item, we have special case
	if (N_entries == 0 || phonebook->contact_name.compare(newcontact->contact_name) > 0)
	{
		newcontact->next_element = phonebook;
		phonebook = newcontact;
	}
	else
	{
		contact_info* contact = phonebook;
		while (contact != NULL)
		{
			if (newcontact->contact_name.compare(contact->contact_name) == 0)
			{

				cout << "Contact wasnt saved because a contact with the same name exists!" << endl;
				return;

				break;

			}
			else
				contact = contact->next_element;

		}
		contact_info* previous = phonebook;
		contact_info* next = phonebook->next_element;
		while (next != NULL)
		{
			if (newcontact->contact_name.compare(next->contact_name) < 0) break;
			previous = next;
			next = next->next_element;

		}
		previous->next_element = newcontact;
		newcontact->next_element = next;

	}
	N_entries++;
}


// Function searchs & returns the pointer to contact based on contact name (or NULL if not found).
contact_info* contact_find(string Name)
{

	contact_info* contact = phonebook;
	while (contact != NULL)
	{
		if (Name.compare(contact->contact_name) == 0)
			return contact;
		else
			contact = contact->next_element;
	}
	return NULL;
}
//Function prints a contact information.
void contact_show(contact_info* contact)
{
	cout << "Ime na kontakta: " << contact->contact_name << endl;
	cout << "Nomer na kontakta: " << contact->phone_number << endl;

}
//Function does Finding, Showing, confirming and deleting a contact
void contact_find_show_delete()
{
	cout << "Enter a contact that you want to be deleted : ";
	string Name;
	cin.ignore();
	getline(cin, Name);
	upcase(Name);
	cout << endl;
	contact_info* contact = contact_find(Name);
	if (contact != NULL)
	{
		cout << "The following contact will be deleted:" << endl;
		contact_show(contact);
		cout << "Press 1 ,if you agree to continue:";
		char confirm;
		cin >> confirm;
		if (confirm == '1' || confirm == '1')
		{
			if (contact == phonebook)
			{
				phonebook = phonebook->next_element;
			}
			else
			{
				contact_info* previous = phonebook;
				while (previous->next_element != contact) previous = previous->next_element;
				previous->next_element = contact->next_element;
			}
			delete contact;
			N_entries--;
			cout << "Kontakta uspeshno iztrit" << endl;
		}
		else cout << "Ne se iztri kontakta" << endl;
	}
	else cout << "A contact with the name  " << Name << " wasnt found in the phonebook  !!!" << endl;
}
//This functions handels searching for a contact
void contact_find_show()
{
	cout << "Please enter a contact you want to search : ";
	string Name;
	cin.ignore();
	getline(cin, Name);
	cout << endl;
	upcase(Name);
	contact_info* contact = contact_find(Name);
	if (contact != NULL)
		contact_show(contact);
	else
		cout << "Contact with the name  " << Name << " wasnt found in the phonebook!!!" << endl;
}
//This function saves contacts
void phonebook_save()
{
	ofstream phonebook_file;
	phonebook_file.open(phonebook_filename);
	cout << "Saving  " << N_entries << " contacts  " << phonebook_filename << " ..." << endl;
	phonebook_file << N_entries << endl;
	contact_info* current_item = phonebook;
	while (current_item != NULL)
	{
		phonebook_file << "********************" << endl;
		phonebook_file << current_item->contact_name << endl;
		phonebook_file << current_item->phone_number << endl;
		current_item = current_item->next_element;
	}
	phonebook_file.close();
}
// This function displays all contacts on terminal screen 
void showallcontacts()
{
	ifstream phonebook_file(phonebook_filename);
	string getcontent;
	while (phonebook_file >> getcontent) {

		
		cout << getcontent << endl;

	}
	phonebook_file.close();
}
// This function reads the default contact file
void phonebook_load()
{
	ifstream phonebook_file;
	phonebook_file.open(phonebook_filename);
	if (!phonebook_file.is_open())
	{
		cout << "File could not be opend,because it doesnt exists !!!" << endl;
	}
	else
	{
		phonebook_file >> N_entries;
		contact_info** previous = &phonebook;
		string text;

		getline(phonebook_file, text);
		cout << "Foundgith " << N_entries << " contacts..." << endl;
		for (int i = 0; i < N_entries; i++)
		{
			contact_info* new_entry = new contact_info;

			getline(phonebook_file, text);
			getline(phonebook_file, new_entry->contact_name);
			getline(phonebook_file, new_entry->phone_number);
			
			new_entry->next_element = NULL;
			*previous = new_entry;
			previous = &new_entry->next_element;
		}
		phonebook_file.close();
	}
}
